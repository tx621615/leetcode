64. 最小路径和
最优解问题，可以考虑贪心算法，如果贪心不是很明显，可以考虑动态规划。
空间复杂度可以优化，例如每次只存储上一行的dp 值，则可以将空间复杂度优化到 O(n)。
dp[i][j]表示到达该点的最小路径和
dp[i][j] = Math.min(dp[i][j-1], dp[i-1][j]) + grid[i][j];
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];
        for(int i = 1;i < m; i++)
        {
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }
        for(int i = 1;i < n; i++)
        {
            dp[0][i] = dp[0][i - 1] + grid[0][i];
        }
        for(int i = 1;i<m;i++)
            for(int j=1;j<n;j++)
            {
                dp[i][j] = Math.min(dp[i][j-1], dp[i-1][j]) + grid[i][j];
            }
        return dp[m-1][n-1];
    }
}