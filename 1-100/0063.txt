63. 不同路径 II
动态规划可以解决两个问题，一是最优解问题，而是统计问题，(i,j)与之后的状态无关。
dp[i][j] = dp[i - 1][j] + dp[i][j - 1]//0(不可到达)
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n]; 
        if(obstacleGrid[0][0] == 1) return 0;
        dp[0][0] = 1;
        for(int i=1;i < m;i++)
        {
            if(obstacleGrid[i][0] == 1)
            {
                dp[i][0] = 0;
                continue;
            }
            else
            {
                dp[i][0] = dp[i - 1][0];
            }
        }
        for(int i=1;i < n;i++)
        {
            if(obstacleGrid[0][i] == 1)
            {
                dp[0][i] = 0;
                continue;
            }
            else
            {
                dp[0][i] = dp[0][i - 1];
            }
        }
        for(int i = 1;i < m; i++)
            for(int j = 1;j < n;j++)
            {
                if(obstacleGrid[i][j] == 1)
                {
                    dp[i][j] = 0;
                    continue;
                }
                else
                {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        return dp[m-1][n-1];
    }
}