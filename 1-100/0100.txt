
//递归法判断，树的问题多尝试递归解决，代码比较容易写----算是深度优先遍历
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
       //试一下递归判断
        if(p == null && q == null) return true;
        else if(p == null && q != null) return false;
        else if(p != null && q == null) return false;
       else
       {
           return isSameTree(p.left, q.left) && isSameTree(p.right, q.right) && (p.val == q.val);
       }
    }
}

//广度优先遍历---自己写的
//认为添加一个空结点，然后空结点之上不再添加结点
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
      //层次遍历比较好
      //人为给空的添加一个
      LinkedList<TreeNode> q1 = new LinkedList();
      LinkedList<TreeNode> q2 = new LinkedList();
        if(p == null && q == null) return true;
        if(p == null && q != null) return false;
        if(p != null && q == null) return false;
        q1.add(p);
        q2.add(q);
        while(q1.size() != 0 && q2.size() != 0)
        {
            p = q1.poll();
            q = q2.poll();
            if(p.val != q.val) return false;
            if(p.left == null && p.val != 10001)
            {
                p.left = new TreeNode(10001); 
            }
            if(p.right == null && p.val != 10001)
            {
                p.right = new TreeNode(10001); 
            }
            if(q.left == null && q.val != 10001)
            {
                q.left = new TreeNode(10001); 
            }
            if(q.right == null && q.val != 10001)
            {
                q.right = new TreeNode(10001); 
            }
            if(p.left != null)
                q1.add(p.left);
            if(p.right != null)
                q1.add(p.right);
            if(q.left != null)
                q2.add(q.left);
            if(q.right != null)
                q2.add(q.right);
        }
        if(q1.size() == 0 && q2.size() == 0) return true;
        else return false;
    }
}

//官方
//注意异或的用法，只能用于bool值和int类型的值，不能用于指针
//思路：弹出来一个后，先判断左右子树是否结构相同，不同则直接false，相同就加入比较
//如果结果和if判断的条件相同的话，可以直接return条件
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null && q == null) {
            return true;
        } else if (p == null || q == null) {
            return false;
        }
        Queue<TreeNode> queue1 = new LinkedList<TreeNode>();
        Queue<TreeNode> queue2 = new LinkedList<TreeNode>();
        queue1.offer(p);
        queue2.offer(q);
        while (!queue1.isEmpty() && !queue2.isEmpty()) {
            TreeNode node1 = queue1.poll();
            TreeNode node2 = queue2.poll();
            if (node1.val != node2.val) {
                return false;
            }
            TreeNode left1 = node1.left, right1 = node1.right, left2 = node2.left, right2 = node2.right;
            if (left1 == null ^ left2 == null) {
                return false;
            }
            if (right1 == null ^ right2 == null) {
                return false;
            }
            if (left1 != null) {
                queue1.offer(left1);
            }
            if (right1 != null) {
                queue1.offer(right1);
            }
            if (left2 != null) {
                queue2.offer(left2);
            }
            if (right2 != null) {
                queue2.offer(right2);
            }
        }
        return queue1.isEmpty() && queue2.isEmpty();
    }
}