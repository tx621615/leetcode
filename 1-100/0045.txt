45. 跳跃游戏 II
1.第一个想法---回溯，因为是选择问题
通过了82个用例，不过超时了。
class Solution {
    int min = Integer.MAX_VALUE;
    public int jump(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        dfs(0,nums,0);
        return min;
    }

    public void dfs(int start, int[] nums, int count)
    {
        if(start > nums.length - 1)
            return;
        if(start == nums.length - 1)
        {
            if(count < min)
                min = count;
            return;
        }
        for(int i = start + 1;i <= (start + nums[start]); i++)
        {
            if(min <= count + 1) break;
            dfs(i, nums, count + 1);
        }
    }
}

2.要考虑的问题
1.如果比较相等，则考虑跳到后面的位置
2.如果可以直接跳到最后一个位置，则不用考虑更大的跳跃。
class Solution {
    public int jump(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        if(nums[0] == 0) return 0;
        //贪心算法，尽可能的跳到最远的位置，这样跳跃最少
        int count = 0;
        int i = 0;
        while(true)
        {
            if(i >= nums.length - 1) break;
            count++;
            int max = 0;
            int maxj = 0;
            for(int j = 1;j <= nums[i]; j++)
            {
                if((i +j) < nums.length && nums[i + j] + j >= max)
                {
                    max = nums[i + j] + j;
                    maxj = j;
                }
                if((i + j) == nums.length - 1)
                {
                    maxj = j;
                    break;
                }
            }
            i = i + maxj;
        }
        return count;
    }
}
