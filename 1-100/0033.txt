33. 搜索旋转排序数组
还是通过二分法搜索。
每次将数组一分为2的时候，有两种情况，一是数组已经有序了，一是数组还是旋转数组无序。
如果数组还是无序情况，一分为2的时候，必定有一部分有序。
利用有序数组，将target与其两个端点比较，看是否target存在
[low,mid - 1]有序,且target < nums[mid] && target >= nums[low], high = mid -1,否则low = mid +1
[mid, high]有序, 且target >nums[mid] && target <= nums[high], low = mid + 1, 否则high = mid - 1;
关键：如何判断到底是那部分有序---nums[0]和nums[mid]比较，如果nums[0] <= nums[mid] (两个元素可能会相等), 说明[low,mid]是有序序列，否则令一部分是有序序列(有序序列都可以包含mid)
9)class Solution {
    public int search(int[] nums, int target) {
        int length = nums.length;
        if(length == 0) return -1;
        if(length == 1) return nums[0] == target ? 0:-1;
        int low = 0;
        int high = length -1;
        while(low <= high)
        {
            int mid = (low + high)/2;
            if(nums[mid] == target) return mid;
            if(nums[0] <= nums[mid])  //根据nums[0]来判断有序
            {
                if(nums[low] <= target && nums[mid] > target)  //不要使用mid -1 和mid + 1来判断可能会溢出
                {
                    high = mid - 1;
                }
                else
                {
                    low = mid + 1;
                }
            }
            else
            {
                if(nums[mid] < target && nums[high] >= target)
                {
                    low = mid + 1;
                }
                else
                {
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
}
