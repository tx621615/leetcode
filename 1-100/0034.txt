34. 在排序数组中查找元素的第一个和最后一个位置
排序数组查找最左和最右元素下标
二分法
相等的时候不要立即退出，而是通过比较前一个和后一个元素是否相等，如果相等则缩小范围，否则就退出循环。
注意一个误区，我们要找的值是mid,low和high只是为了缩小区间而存在的，其并无什么含义，mid对应的才是表示对应的值。

正好查第一个元素和最后一个元素的判断，mid记录，需要做一些多余的判断
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int length = nums.length;
        int[] res = new int[2];
        res[0] = -1;
        res[1] = -1;
        if(length == 0) return res;
        int low = 0;
        int high = length - 1;
        int mid = 0;
        while(low <= high)
        {
            mid = (low + high) / 2;
            if(nums[mid] == target)
            {
                if((mid - 1) >= 0 && nums[mid - 1] == nums[mid])
                    high = mid - 1;
                else
                {
                    res[0] = mid;
                    break;
                }
            }
            if(nums[mid] > target)
            {
                high = mid - 1;
            }
            else if(nums[mid] < target)
            {
                low = mid + 1;
            }            
        }
        if(low > high) res[0] = -1;
        low = 0;
        high = length - 1;
        while(low <= high)
        {
            mid = (low + high) / 2;
            if(nums[mid] == target)
            {
                if((mid + 1) < length && nums[mid + 1] == nums[mid])
                    low = mid + 1;
                else
                {
                    res[1] = mid;
                    break;
                }
            }
            if(nums[mid] > target)
            {
                high = mid - 1;
            }
            else if(nums[mid] < target)
            {
                low = mid + 1;
            }           
        }
        if(low > high) res[1] = -1;
        return res;
    }
}

查第一个元素的前面一个元素，此时使用high指针可以合并，查最后一个元素的后面一个元素，此时使用low指针可以合并
将等于的情况和大于或者小于的情况合并
查找第一个大于或者小于target的元素
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int length = nums.length;
        int[] res = new int[2];
        res[0] = -1;
        res[1] = -1;
        if(length == 0) return res;
        int low = 0;
        int high = length - 1;
        int mid = 0;
        while(low <= high)
        {
            mid = (low + high) / 2;
            if(nums[mid] >= target)
            {
                high = mid - 1;
                
            }
            else
            {
                low = mid + 1;
            }     
        }
        if((high + 1) < length && nums[high + 1] == target) res[0] = high + 1;
        low = 0;
        high = length - 1;
        while(low <= high)
        {
            mid = (low + high) / 2;
            if(nums[mid] <= target)
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }     
        }
        if((low - 1) >= 0 && nums[low - 1] == target) res[1] = low - 1;
        return res;
    }
}