两个关键问题
1.只有有两个结点才需要交换（所以需要检查两个结点），其实要注意如果你为Null那就没有next。
2.两个结点交换后，才能把上次的最末尾的结点指向交换后的第一个节点，然后再遍历下一组结点。
这里为了让第一组结点也存在前驱，申请了一个dummy node，同时用rear存储当前最后一组结点的第二个结点（注意只有一个结点时rear并不会发生改变，当然也不需要）
其实相当于将链表遍历然后加入到新的链表中（dummynode为头结点的链表）
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode dummy = new ListNode(0, head);
        ListNode rear = dummy;
        ListNode p;
        ListNode q = head;
        while(q != null && q.next != null)
        {   

            p = q.next;
            q.next = p.next;
            p.next = q;
            rear.next = p;
            rear = q;
            q = q.next;
        }
        return dummy.next;
    }
}

递归法
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null) //注意结束条件
            return head;
        ListNode p = head;
        ListNode q = head.next;
        p.next = q.next;
        q.next = p;
        p.next = swapPairs(p.next);  //交换后必须重新赋值
        return q;
    }
}