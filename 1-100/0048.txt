48. 旋转图像
递归
先旋转里面再最后旋转外部
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        help(matrix,0,0,n);
        
    }

    public void help(int[][] matrix, int rowstart, int colstart, int n)
    {
        if(n <= 1) return;
        help(matrix, rowstart + 1, colstart + 1, n - 2);
        for(int i = 1;i < n;i++)
        {
            int temp = matrix[rowstart][colstart];
            for(int j = rowstart + 1;j<rowstart + n;j++)
            {
                matrix[j - 1][colstart] = matrix[j][colstart];
            }
            for(int j=colstart+1;j<=colstart+n-1;j++)
            {
                matrix[rowstart+n-1][j-1]=matrix[rowstart+n-1][j];
            }
            for(int j=rowstart+n-2;j>=rowstart;j--)
            {
                matrix[j+1][colstart+n-1]=matrix[j][colstart+n-1];
            }
            for(int j=colstart+n-2;j>=colstart;j--)
            {
                matrix[rowstart][j+1]=matrix[rowstart][j];
            }
            matrix[rowstart][colstart+1]=temp;
        }
    }
}

迭代
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        int i = 0;
        while(n > 1)
        {
            help(matrix,i,i,n);
            i = i + 1;
            n = n - 2;
        }
    }

    public void help(int[][] matrix, int rowstart, int colstart, int n)
    {
        if(n <= 1) return;
        
        for(int i = 1;i < n;i++)
        {
            int temp = matrix[rowstart][colstart];
            for(int j = rowstart + 1;j<rowstart + n;j++)
            {
                matrix[j - 1][colstart] = matrix[j][colstart];
            }
            for(int j=colstart+1;j<=colstart+n-1;j++)
            {
                matrix[rowstart+n-1][j-1]=matrix[rowstart+n-1][j];
            }
            for(int j=rowstart+n-2;j>=rowstart;j--)
            {
                matrix[j+1][colstart+n-1]=matrix[j][colstart+n-1];
            }
            for(int j=colstart+n-2;j>=colstart;j--)
            {
                matrix[rowstart][j+1]=matrix[rowstart][j];
            }
            matrix[rowstart][colstart+1]=temp;
        }
    }
}

1.矩阵规律
矩阵的第i,j元素，旋转90度后是原来的i,j
matrix[row][col]----matrix[col][n-row-1]
用一个新数组保存置换后的数组，再复制到原来数组
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        int[][] matrix_new = new int[n][n];
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                matrix_new[j][n - i - 1] = matrix[i][j];
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                matrix[i][j] = matrix_new[i][j];
            }
        }
    }
}

2.矩阵规律进阶
matrix[row][col]----matrix[col][n-row-1] ，但是使用原地空间
int temp保存，直接复制，总共有四个数需要旋转，保存第一个位置，然后旋转。
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2; ++i) {
            for (int j = 0; j < (n + 1) / 2; ++j) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[n - j - 1][i];
                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = temp;
            }
        }
    }
}


3.
90度旋转=先行倒转 + 对角线交换
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        for(int i = 0;i < n / 2;i++)
            for(int j = 0; j < n;j++)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[n - i - 1][j];
                matrix[n - i - 1][j] = temp;
            }

        for(int i = 0; i < n; i++)
            for(int j = 0; j < i; j++)
                {
                    int temp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = temp;
                }
    }
}