113路径总和 II
回溯法：要点
1.route选择数组  2.选择列表数组selector，这里因为是树只有两种选择所以可以不用。
3.进入选择的时候数组必须复制，否则会出现添加了最终数组，但是数组在不断改变的情况
4.进入一个状态前必须先添加。  //判断，然后再选择
先做选择，再进入状态
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        List<Integer> route = new ArrayList<>();
        route.add(root.val);   //要点4
        help(root,res,route,targetSum - root.val);  //对应的值改变
        return res;
    }

    public void help(TreeNode root,List<List<Integer>> res, List<Integer> route, int targetSum)
    {   
        route = new ArrayList<>(route);
        if(root.left == null && root.right == null)
        {
            if(targetSum == 0) 
            {
                res.add(route);
                
            }
            return;
        }
        if(root.left != null)
        {
            route.add(root.left.val);
            help(root.left,res,route,targetSum - root.left.val);
            route.remove(route.size() - 1);
        }
        if(root.right != null)
        {
            route.add(root.right.val);
            help(root.right, res, route, targetSum - root.right.val);
            route.remove(route.size() - 1);
        }
    }
}

class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        List<Integer> route = new ArrayList<>();
        route.add(root.val);   
        help(root,res,route,targetSum - root.val);  
        return res;
    }

//只有要加入路径的时候才要复制，其他时候任由路径更改即可
    public void help(TreeNode root,List<List<Integer>> res, List<Integer> route, int targetSum)
    {       
        if(root.left == null && root.right == null)
        {
            if(targetSum == 0) 
            {
                route = new ArrayList<>(route);
                res.add(route);
                
            }
            return;
        }
        if(root.left != null)
        {
            route.add(root.left.val);
            help(root.left,res,route,targetSum - root.left.val);
            route.remove(route.size() - 1);
        }
        if(root.right != null)
        {
            route.add(root.right.val);
            help(root.right, res, route, targetSum - root.right.val);
            route.remove(route.size() - 1);
        }
    }
}

2.先进入再选择
class Solution {
    List<List<Integer>> ret = new LinkedList<List<Integer>>();
    Deque<Integer> path = new LinkedList<Integer>();

    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        dfs(root, sum);
        return ret;
    }

    public void dfs(TreeNode root, int sum) {
        if (root == null) {
            return;
        }
        path.offerLast(root.val);
        sum -= root.val;
        if (root.left == null && root.right == null && sum == 0) {
            ret.add(new LinkedList<Integer>(path));
        }
        dfs(root.left, sum);
        dfs(root.right, sum);
        path.pollLast();
    }
}


3.还是深度优先递归，使用原来函数的定义
public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        List<Integer> route = new ArrayList<>();
        
        if(root.left == null && root.right == null)
        {
            if(targetSum - root.val == 0){
                route.add(root.val);
                res.add(route);
            }
            return res;
        }
        
        List<List<Integer>> resleft = pathSum(root.left, targetSum - root.val);
        List<List<Integer>> resright = pathSum(root.right, targetSum - root.val);
        for(List<Integer> list:resleft)
        {
            list.add(0, root.val);
            res.add(list);
        }
        for(List<Integer> list:resright)
        {
            list.add(0, root.val);
            res.add(list);
        }
        return res;
    }

4.广度优先遍历使用两个Queue，一个Queue正常广度遍历，一个Queue来记录路径长度用来判断，一个HashMap来记录每个结点的父节点，从而可以输出整个路径。