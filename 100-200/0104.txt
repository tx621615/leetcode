104. 二叉树的最大深度
//思路：就是求树的高度，先求左右子树的高度，在加上根的高度即可，优先采用递归
//深度优先遍历
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        return left >= right ? left + 1 : right + 1;
    }
}

//广度优先遍历
//思路：当遍历到该层最右的指针的时候，层数加1
//三个指针，指针1工作指针root，指针2--最新最右的指针p，指针三--遍历的该层的最右指针q，当root==q时候加1,同时更新层数（q = p）
class Solution {
    public int maxDepth(TreeNode root) {
        //广度优先遍历，采用一个指针记录上一个结点
        if(root == null) return 0;
        TreeNode pre = root;
        TreeNode p = root;
        int level = 0;
        LinkedList<TreeNode> queue = new LinkedList();
        queue.add(root);
        while(queue.size() != 0)
        {
            root = queue.poll();
            if(root.left != null)
            {
                queue.add(root.left);
                p = root.left;
            }
            if(root.right != null)
            {
                queue.add(root.right);
                p = root.right;
            }
            if(root == pre)
            {
                pre = p;
                level++;
            }
        }
        return level;
    }
}

//思路：遍历每层之前先记录每层的结点数目（此时结点只有该层的结点），然后依次遍历该层所有结点，每遍历一个结点，size--，当size减为0的时候，说明该层遍历完毕，所以层数加1
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        int ans = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                TreeNode node = queue.poll();
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
                size--;
            }
            ans++;
        }
        return ans;
    }
}